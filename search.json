[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Ice Breaker",
    "section": "",
    "text": "About\n\n\n\n\n\nThis manuscript provides a brief tutorial for getting started with R and RStudio.\n\nCitation\nYou can cite this work as:\nSanchez, G. (2022) Breaking the Ice with R: Getting Started with R and RStudio.  https://www.gastonsanchez.com/R-ice-breaker\n\n\n\nMy Series of R Tutorials\nThis document is part of series of texts that I’ve written about Programming and Data Analysis in R:\n\nBreaking the Ice with R: Getting Started with R and RStudio  https://www.gastonsanchez.com/R-ice-breaker\nTidy Hurricanes: Analyzing Tropical Storms with Tidyverse Tools  https://www.gastonsanchez.com/R-tidy-hurricanes\nR Coding Basics: An Introduction to the Basics of Coding in R  https://www.gastonsanchez.com/R-coding-basics\nRolling Dice: Exploring Simulations in Games of Chance with R  https://www.gastonsanchez.com/R-rolling-dice\nR for Strings: Handling Strings with R  https://www.gastonsanchez.com/R-for-strings\nWeb Technologies in R: A Short Introduction to Web Technologies in R  https://www.gastonsanchez.com/R-web-technologies\n\n\n\n\nDonation\nAs a Data Science and Statistics educator, I love to share the work I do. Each month I spend dozens of hours curating learning materials like this resource. If you find any value and usefulness in it, please consider making a one-time donation—via paypal—in any amount (e.g. the amount you would spend inviting me a cup of coffee or any other drink). Your support really matters.\n\n\n\nLicense\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License."
  },
  {
    "objectID": "1-01-installing-r.html",
    "href": "1-01-installing-r.html",
    "title": "1  Installing R",
    "section": "",
    "text": "To learn how to use R, you obviously need to have access to it. This chapter, and the next one, guide you through the installation process of R and RStudio so that you can have both programs up and running in your computer.\nIf you already have R and RStudio installed in your machine, you can safely go to chapter First Contact with R."
  },
  {
    "objectID": "1-01-installing-r.html#interacting-with-r",
    "href": "1-01-installing-r.html#interacting-with-r",
    "title": "1  Installing R",
    "section": "1.1 Interacting with R",
    "text": "1.1 Interacting with R\nBefore I show you how to install R and the integrated development environment RStudio, let me tell you first about the different ways in which users can work with R.\nOverall, you can work with R in two major ways:\n\nInteractive Mode, and\nNon-interactive Mode\n\nInteractive Mode. Most R users work with R in an interactive way, and this is certainly the way I personally interact with R in my daily coding activities. Interactive means that you launch R (i.e. you open a session), having direct access to its console. This is where you type in commands, and then R does its magic reading the commands, parsing them, evaluating them, and—typically—printing an output back into the console, waiting for you to type in the next command(s).\nNon-interactive Mode. In contrast to interactive mode, working with R in non-interactive way involves writing all the commands in a text file (for example in an R script file), and then asking your computer—via the command line interface—to pass this file to R so that it runs the commands without you launching R or having direct access to its console.\nThink of interactive way as having a direct conversation with R, establishing a dialogue in which you type in a command, R interprets it, gives you an answer, and then you type more commands, continuing the dialogue. In contrast, non-interactive is like writing a letter (or an email) to R. Here you don’t have that synchronous conversation, instead R will see the script file, try to execute all the commands “behind the scenes”, and it will disappear when it finishes the computations. You may get some output back, but R is gone in the sense that there is no open session waiting for you to execute the next instructions.\nMost of what I discuss in this book is applicable to writing code in R regardless of how you decide to interact with R. However, to learn R and to follow the examples of the book it is definitely much better to do it in an interactive way using: a) R’s built-in graphical user interface (R’s GUI), b) an integrated development environment (IDE) such as RStudio, or c) R from a command line interface (CLI) commonly referred to as a terminal.\n\n\n\n\n\nFigure 1.1: Interacting with R in various ways: R’s GUI, RStudio, and R from a command-line terminal\n\n\nWhile you can interact with R using its built-in graphical user interface (GUI) or launching R from the terminal (command line interface), nowadays I highly recommend that you interact with it using an Integrated Development Environment (IDE) such as RStudio. Simply put, programs like RStudio provide a nice working space that make your life easier while writing code, creating all sorts of reports, documents, and slides, running analysis, making graphs, generating outputs, creating web apps, etc.\n\n\n\n\n\nFigure 1.2: Main computational tools: R and RStudio\n\n\nKeep in mind that R and RStudio are not the same thing. R is like the main\n“engine” or computational core. RStudio is just a convenient layer that talks directly to R, and gives us a convenient working space to organize our files, to type in code, to run commands, visualize plots, interact with our filesystem, etc. Having said that, everything that happens in RStudio, can be done in R alone. Yes, you may need to write more code and work in a more rudimentary way, but nothing should stop your work in R if one day RStudio disappears from the face of the earth.\nBy the way, both R and RStudio are free, and available for Mac (OS X), Windows, and Linux (e.g. Ubuntu, Fedora, Debian). More about this in the following sections."
  },
  {
    "objectID": "1-01-installing-r.html#installing-r",
    "href": "1-01-installing-r.html#installing-r",
    "title": "1  Installing R",
    "section": "1.2 Installing R",
    "text": "1.2 Installing R\nTo download and install R in your computer, follow the steps listed below.\nStep 1) Go to the R project website: https://r-project.org\n\n\n\n\n\nFigure 1.3: R project’s home webpage\n\n\nStep 2) Click on the CRAN link, located in the navigation bar (on the left side). This will take you to the Comprehensive R Archive Network page (see screenshot below).\n\n\n\n\n\nFigure 1.4: R is available for MacOS, Windows, and Linux\n\n\nStep 3) Click on the download option that corresponds to your operating system (e.g. Linux, Mac, or Windows). In my case, I have a Mac computer, which explains why the Mac OS-X link is highlighted in the above screenshot.\n\n\n\n\n\nFigure 1.5: CRAN download for Mac\n\n\nFor most users, you will want to install the Latest release, which in the screenshot above happens to be R 4.0.5 \"Shake and Throw\". Keep in mind that by the time you read this book, R will very likely have a more recent version.\nStep 4) Click on the package link, which in the screenshot corresponds to R-4.0.5.pkg. This is the link of a compressed file that contains the binary code. Before installing a given version of R, read the description of the release to make sure the operating system in your computer is compatible with a specific version of R.\nAfter clicking on the R-4.0.5.pkg link, the compressed file will be downloaded to your computer.\nStep 5. Click on the downloaded file. An installation wizard will open automatically, ready to guide you through the installation process, step by step (see image below).\n\n\n\n\n\nFigure 1.6: R Installation wizard for Mac\n\n\nIn most cases, you will want to use the default settings. Personally, I’ve been using the default settings for several years without having the need to customize anything.\nAt the end of the installation, if everything went well, you should be able to see a successful message (see figure below):\n\n\n\n\n\nFigure 1.7: R Installation success"
  },
  {
    "objectID": "1-02-installing-rstudio.html",
    "href": "1-02-installing-rstudio.html",
    "title": "2  Installing RStudio",
    "section": "",
    "text": "In addition to R, the other program you will need to have installed in your machine is RStudio.\nTechnically speaking, RStudio is an Integrated Development Environment (IDE) developed by Posit. An IDE is just the fancy term that is used for a program that provides a nice working space that make your life easier while writing code, running analysis, and making graphs. In addition, you can also use RStudio to create all sorts of reports, documents, slides, and web apps."
  },
  {
    "objectID": "1-02-installing-rstudio.html#download-rstudio",
    "href": "1-02-installing-rstudio.html#download-rstudio",
    "title": "2  Installing RStudio",
    "section": "2.1 Download RStudio",
    "text": "2.1 Download RStudio\nTo download the Desktop version of RStudio follow the steps listed below.\nStep 1) Go to Posit’s download webpage:\nhttps://posit.co/downloads/\n\n\n\n\n\nFigure 2.1: RStudio download options\n\n\nAt the time of this writing, there are two options of RStudio Desktop: 1) the Free version, and 2) the Pro version.\nStep 2) Choose the Free version of RStudio Desktop (see image below), and click on the “DOWNLOAD” button.\n\n\n\n\n\nFigure 2.2: Choose RStudio free desktop\n\n\nStep 3) Select the version that matches your operating system (e.g. Windows, macOS, linux). Double check that the operating system in your computer is compatible with a specific version of RStudio.\n\n\n\n\n\nFigure 2.3: RStudio Desktop versions\n\n\nOnce the installation of RStudio is completed, you should be able to open a new session in RStudio, and start interacting with R."
  },
  {
    "objectID": "1-03-first-contact.html",
    "href": "1-03-first-contact.html",
    "title": "3  First Contact with R",
    "section": "",
    "text": "If you are new to R and don’t have any programming experience, then you should read this chapter in its entirety. If you already have some previous experience working with R and/or have some programming background, then you may want to skim over most of the introductory chapters of part I.\nThis chapter, and the rest of the book, assumes that you have installed both R and RStudio in your computer. If this is not the case, then go to chapters Installing R and Installing RStudio to follow the steps for downloading and installing these programs.\nR comes with a simple built-in graphical user interface (GUI), and you can certainly start working with it right out of the box. That is actually the way I got my first contact with R back in 2001 during my senior year in college. Nowadays, instead of using R’s GUI, it is more convenient to interact with R using a third party software such as RStudio.\nI describe more introductory details about RStudio in the next chapter A Quick Tour Around RStudio. For now, go ahead and launch RStudio in your computer."
  },
  {
    "objectID": "1-03-first-contact.html#first-contact-with-r-via-rstudio",
    "href": "1-03-first-contact.html#first-contact-with-r-via-rstudio",
    "title": "3  First Contact with R",
    "section": "3.1 First Contact with R (via RStudio)",
    "text": "3.1 First Contact with R (via RStudio)\nWhen you open RStudio, you should be able to see its layout organized into quadrants officially called panes. The very first time you launch RStudio you will only see three panes, like in the screenshot below.\n\n\n\n\n\nFigure 3.1: Screenshot of RStudio when launched for the first time.\n\n\nTo help you break the ice with R, it’s better if we start working directly on the Console.\nAs you can tell from the following screenshot, the console is located in the left-hand side quadrant of RStudio. Keep in mind that your RStudio’s console pane may be located in a different quadrant.\n\n\n\n\n\nFigure 3.2: Console quadrant in RStudio.\n\n\nTechnically speaking, the console is a terminal where a user inputs commands and views output. Simply put, this is where you can directly interact with R by typing commands, and getting the output from the execution of the commands.\n\n3.1.1 R as a scientific calculator\nThis first activity is dedicated for readers with little or no programming experience, especially those of you who have never used software in which you have to type commands. The idea is to start typing simple things in the console, basically using R as a scientific calculator.\nHere’s a toy example. Consider the monthly bills of an undergraduate student:\n\ncell phone $80\ntransportation $20\ngroceries $527\ngym $10\nrent $1500\nother $83\n\nYou can use R to find the student’s total expenses by typing these commands in the console:\n\n80 + 20 + 527 + 10 + 1500 + 83\n\nThere is nothing surprising or fancy about this piece of code. In fact, it has all the numbers and all the + symbols that you would use if you had to obtain the total expenses by using the calculator in your cellphone.\n\n\n3.1.2 Assigning values to objects\nOften, it will be more convenient to create objects, sometimes also called variables, that store one or more values. To do this, type the name of the object, followed by the assignment or “arrow” operator <-, followed by the assigned value. By the way, the arrow operator consists of a left-angle bracket < (or “less than” symbol) and a dash or hyphen symbol -.\nFor example, you can create an object phone to store the value of the monthly cell phone bill, and then inspect the object by typing its name:\n\nphone <- 80\nphone\n\n[1] 80\n\n\nAll R statements where you create objects are known as assignments, and they have this form:\nobject <- value\nthis means you assign a value to a given object; one easy way to read the previous assignment is “phone gets 80”.\nAlternatively, you can also use the equals sign = for assignments:\n\ntransportation = 20\ntransportation\n\n[1] 20\n\n\nAs you will see in the rest of the book, I’ve written most assignments with the arrow operator <-. But you can perfectly replace them with the equals sign =. The opposite is not necessarily true. There are some especial cases in which an equals sign cannot be replaced with the arrow, but we’ll talk about this later.\nPro tip. RStudio has a keyboard shortcut for the arrow operator<-:\n\nWindows & Linux users: Alt + -\nMac users: Option + -\n\nIn fact, there is a large set of keyboard shortcuts. In the menu bar, go to the Help tab, and then click on the option Keyboard Shorcuts Help to find information about all the available shortcuts.\n\n\n3.1.3 Object Names\nThere are certain rules you have to follow when creating objects and variables. Object names cannot start with a digit and cannot contain certain other characters such as a comma or a space.\nThe following are invalid names (and invalid assignments)\n# cannot start with a number\n5variable <- 5\n\n# cannot start with an underscore\n_invalid <- 10\n\n# cannot contain comma\nmy,variable <- 3\n\n# cannot contain spaces\nmy variable <- 1\nPeople use different naming styles, and at some point you should also adopt a convention for naming things. Some of the common styles are:\nsnake_case\n\ncamelCase\n\nperiod.case\nPretty much all the objects and variables that I create in this book follow the “snake_case” style. It is certainly possible that you may end up working with a team that has a style-guide with a specific naming convention. Feel free to try various styles, and once you feel comfortable with one of them, then stick to it.\n\n\n3.1.4 Case Sensitive\nR is case sensitive. This means that phone is not the same as Phone or PHONE\n\n# case sensitive\nphone <- 80\nPhone <- -80\nPHONE <- 8000\n\nphone + Phone\n\n[1] 0\n\nPHONE - phone\n\n[1] 7920\n\n\nAgain, this is one more reason why adopting a naming convention early on in a data analysis or programming project is very important. Being consistent with your notation may save you from some headaches down the road.\n\n\n3.1.5 Calling Functions\nLike any other programming language, R has many functions. To use a function just type its name followed by parenthesis. Inside the parenthesis you typically pass one or more inputs. Most functions will produce some type of output:\n# absolute value\nabs(10)\nabs(-4)\n\n# square root\nsqrt(9)\n\n# natural logarithm\nlog(2)\nIn the above examples, the functions are taking a single input. But often you will be working with functions that accept several inputs. The log() function is one them. By default, log() computes the natural logarithm. But it also has the base argument that allows you to specify the base of the logarithm, say to base = 10\n\nlog(10, base = 10)\n\n[1] 1\n\n\n\n\n3.1.6 Comments in R\nAll programming languages use a set of characters to indicate that a specifc part or lines of code are comments, that is, things that are not to be executed. R uses the hash or pound symbol # to specify comments. Any code to the right of # will not be executed by R.\n# this is a comment\n# this is another comment\n2 * 9\n\n4 + 5  # you can place comments like this\nYou will notice that I have included comments in almost all of the code snippets shown in the book. To be honest, some examples may have too many comments, but I’ve done that to be very explicit, and so that those of you who lack coding experience understand what’s going on. In real life, programmers use comments, but not so much as I do in the book. The main purpose of writing comments is to describe—conceptually—what is happening with certain lines of code. Some would even argue that comments should only be used to express not the what but the why a developer is doing something. In case of doubt, especially if you don’t have a lot of programming experience, I think it’s better to err on the side of caution by adding more comments than including no comments whatsoever."
  },
  {
    "objectID": "1-03-first-contact.html#help-documentation",
    "href": "1-03-first-contact.html#help-documentation",
    "title": "3  First Contact with R",
    "section": "3.2 Getting Help",
    "text": "3.2 Getting Help\nBecause we work with functions all the time, it’s important to know certain details about how to use them, what input(s) is required, and what is the returned output.\nSo how do you find all this information technically known as a function’s documentation? There are several ways to access this type of information.\nIf you know the name of a function you are interested in knowing more about, you can use the function help() and pass it the name of the function you are looking for:\n# documentation about the 'abs' function\nhelp(abs)\n\n# documentation about the 'mean' function\nhelp(mean)\nAlternatively, you can use a shortcut using the question mark ? followed by the name of the function:\n# documentation about the 'abs' function\n?abs\n\n# documentation about the 'mean' function\n?mean\nhelp() and ? only work if you know the name of the function your are looking for. Sometimes, however, you don’t know the name of the function but you may know some keyword(s). To look for related functions associated to a keyword, use help.search() or simply type double question marks ??\n# search for 'absolute'\nhelp.search(\"absolute\")\n\n# alternatively you can also search like this:\n??absolute\nNotice the use of quotes surrounding the input name inside help.search()\nOften overlooked by beginners but extremely helpful is to understand the anatomy of the information displayed in the technical documentation. The content is typically organized into seven sections listed below (although sometimes there may be less or more sections)\n\nTitle\nDescription\nUsage of function\nArguments\nDetails\nSee Also\nExamples\n\nThe three screenshots below show the “Help” or technical documentation of the log() function. This information is in RStudio’s Help tab, located in the pane that contains other tabs such as Files, Plots, Packages.\n\n\n\n\n\nFigure 3.3: Help documentation for the log function (part 1).\n\n\n\n\n\n\n\nFigure 3.4: Help documentation for the log function (part 2).\n\n\n\n\n\n\n\nFigure 3.5: Help documentation for the log function (part 3)."
  },
  {
    "objectID": "1-03-first-contact.html#installing-packages",
    "href": "1-03-first-contact.html#installing-packages",
    "title": "3  First Contact with R",
    "section": "3.3 Installing Packages",
    "text": "3.3 Installing Packages\nR comes with a large set of functions and packages. A package is a collection of functions that have been designed for a specific purpose. One of the great advantages of R is that many analysts, scientists, programmers, and users can create their own packages and make them available so that everybody can use them. R packages can be shared in different ways. The most common way to share a package is to submit it to what is known as CRAN, the Comprehensive R Archive Network.\nYou can install a package using the install.packages() function. To do this, I recommend that you run this command directly on the console. In other words, do not include this command in a source file (e.g. R script file, Rmd file). The reason for running this command directly on the console is to avoid getting an error message when running code from a source file.\nTo use install.packages() just give it the name of a package, surrounded by quotes, and R will look for it in CRAN, and if it finds it, R will download it to your computer.\n# installing (run this on the console!)\ninstall.packages(\"knitr\")\nYou can also install a bunch of packages at once by placing their names, each name separated by a comma, inside the c() function:\n# run this command on the console!\ninstall.packages(c(\"readr\", \"ggplot2\"))\nOnce you installed a package, you can start using its functions by loading the package with the function library(). For better or worse, library() allows you to specify the name of the package with or without quotes. Unlike install.packages() you can only specify the name of one package in library()\n# (this command can be included in an Rmd file)\nlibrary(knitr)      # without quotes\nlibrary(\"ggplot2\")  # with quotes\nBy the way, you only need to install a package once. After a package has been installed in your computer, the only command that you need to invoke in order to use its functions is the library() function."
  },
  {
    "objectID": "1-03-first-contact.html#exercises",
    "href": "1-03-first-contact.html#exercises",
    "title": "3  First Contact with R",
    "section": "3.4 Exercises",
    "text": "3.4 Exercises\n1) Here’s the list of monthly expenses for a hypothetical undergraduate student\n\ncell phone $80\ntransportation $20\ngroceries $550\ngym $15\nrent $1500\nother $83\n\n\nUsing the console pane of RStudio, create objects (i.e. variables) for each of these expenses listed above, and then create an object total with the sum of the expenses.\n\n\n\nShow answer\ncellphone = 80\ntransportation = 20\ngroceries = 550\ngym = 15\nrent = 1500\nother = 83\n\ntotal = cellphone + transportation + groceries + gym + rent + other\n\n\n\nAssuming that the student has the same expenses every month, how much would she spend during a school “semester”? (assume the semester involves five months). Write code in R to find this value.\n\n\n\nShow answer\nsemester_exps = total * 5\n\n\n\nUsing the same assumption about the monthly expenses, how much would she spend during a school “year”? (assume the academic year is 10 months). Write code in R to find this value.\n\n\n\nShow answer\nyear_exps = total * 10\n\n\n\n2) Use the function install.packages() to install packages \"rvest\", \"RColorBrewer\", and \"bookdown\"\n\n\nShow answer\ninstall.packages(c(\"rvest\", \"RColorBrewer\", \"bookdown\"))\n\n\n\n3) Write code in the console to calculate: \\(3x^2 + 4x + 8\\) when \\(x = 2\\)\n\n\nShow answer\nx = 2\n\n(3 * x^2) + (4 * x) + 8\n\n\n\n4) Calculate: \\(3x^2 + 4x + 8\\) but now with a numeric sequence for \\(x\\) using x <- -3:3\n\n\nShow answer\nx = -3:3\n\n(3 * x^2) + (4 * x) + 8\n\n\n\n5) Find out how to look for information about math binary operators like + or ^ (without using ?Arithmetic). Tip: quotes are your friend.\n\n\nShow answer\n?`+`\n\n# also\n?\"+\""
  },
  {
    "objectID": "1-04-rstudio-tour.html",
    "href": "1-04-rstudio-tour.html",
    "title": "4  A Quick Tour Around RStudio",
    "section": "",
    "text": "As I mentioned in the previous chapter, R comes with a simple built-in graphical user interface, or GUI for short. While you can use this interface to work with R, it is more convenient if you interact with R using a third party software such as RStudio.\nTechnically speaking, RStudio is an IDE which is the acronym for Integrated Development Environment. This is just the fancy name for any software application that provides comprehensive facilities to programmers for making their lives easier when writing code and developing programs.\nSimply put, you can think of RStudio as a “workbench” that gives you an organized working space for interacting with R, while taking care of many of the little tasks that can be a hassle."
  },
  {
    "objectID": "1-04-rstudio-tour.html#first-contact-with-rstudio",
    "href": "1-04-rstudio-tour.html#first-contact-with-rstudio",
    "title": "4  A Quick Tour Around RStudio",
    "section": "4.1 First Contact with RStudio",
    "text": "4.1 First Contact with RStudio\nWhen you open RStudio, you should be able to see its layout organized into quadrants officially called panes (or panels).\nThe very first time you launch RStudio you will only see three panes, like in the screenshot below.\n\n\n\n\n\nFigure 4.1: Screenshot of RStudio when launched for the first time.\n\n\nAs you can tell from the previous screenshot, the left-hand side shows the Console pane which is what we used in the previous chapter to write a handful of simple commands, execute them, and inspect the output provided by R.\nIf RStudio only displays three panes, why do I call them “quadrants”? Where is the fourth pane? Well, to see the extra pane you need to open a file. One way to do this is by clicking on the icon of a blank file with a green plus sign. This button is located in the top-left corner of the icons menu bar of RStudio. A drop-down menu with a long list of available file formats will be displayed, the first option being an “R Script” file (see image below).\n\n\n\n\n\nFigure 4.2: Opening a new (text) file in RStudio.\n\n\nOnce you open a (text) file, the layout of RStudio will show the Editor quadrant, officially called the Source pane, like in the following screenshot.\n\n\n\n\n\nFigure 4.3: RStudio layout organized into quadrants.\n\n\nThe visual appearance of RStudio’s quadrants can be a bit intimidating for beginners. But fear not. In the above screenshot, the panes are:\n\nSource or editor pane (top left quadrant)\nConsole pane (bottom left quadrant)\nEnvironment/History/Connections pane (top right quadrant)\nFiles/Plots/Packages/Help pane (bottom right quadrant)\n\nPro tip: among many other things, you can change the default location of the panes. If you are interested in knowing what customizing options are available in RStudio, visit the following link:\nhttps://support.rstudio.com/hc/en-us/articles/200549016-Customizing-RStudio\nIf you have no previous programming experience, you don’t have to customize anything right now. It’s better if you wait some days until you get a better feeling of the working environment. You will probably be experimenting (trial and error) some time with the customizing options until you find what works for you."
  },
  {
    "objectID": "1-04-rstudio-tour.html#rstudio-panes-in-a-nutshell",
    "href": "1-04-rstudio-tour.html#rstudio-panes-in-a-nutshell",
    "title": "4  A Quick Tour Around RStudio",
    "section": "4.2 RStudio Panes in a Nutshell",
    "text": "4.2 RStudio Panes in a Nutshell\nSooner or later you will be using all four panes in RStudio. Most programming activities will require working with both the Source and Console panes. Certain operations will involve using the Files tab. Occasionally you will also use one of the tabs in the Environment/History/etc pane. The set of specific tabs that you have to use really depends on the type of work you plan to carry out. You will have time to learn the basics—and not so basics—of every pane throughout the book. The more time you spend in RStudio, and the more you use it, the more features you will discover about it.\n\n4.2.1 Console\nThe Console is supposed to be the terminal—or the place—where you type in commands, which R then executes, and where the output of those commands is typically displayed. The truth is that most programmers don’t write commands directly in the console. Instead, what we use is the Source pane to write commands in a text file (e.g. an R-Script file, an R-Markdown file), and then execute the commands from that pane.\nThe reason for writing commands in a text file and not directly in the console, is because of convenience and organization. Convenience because, as you will see, many commands involve writing several lines of code which can be tricky to write them correctly just by typing in the console. Organization in the sense that having all your commands in a text file makes it easy to store your code, keep track of all the work you do, build upon it, and share it with others.\nSo, knowing that programmers rarely make direct use of the Console, when do you actually use this pane? I don’t know about the rest of programmers but I can tell you how I personally use it.\nOne common use of the Console is when I want to calculate basic things like the monthly balance in my credit cards, or the overall score for one of the students in the classes I teach, or some other quick computation. These are types of calculations that I could perfectly perform with any scientific calculator like the one in my smartphone. But more often than not I prefer to do them in R, typically when that’s the tool I have at hand (which happens almost every day).\nThe other typical situation in which I use the console is when I’m trying out some simple idea or testing if a certain command could work. I like to explore the feasibility of my code with a small example in the console, and then refine it or generalize it by writing code in a text file—using the Source pane.\n\n\n4.2.2 Files, Plots, Packages, Help\nThe Files quadrant contains multiple tabs.\n\nFiles: this tab lets you navigate your file system without the need of leaving RStudio. You can move to any directory or folder in your home directory, inspect the contents of a given folder, create a new folder, and perform standard operations on files such as opening, renaming, moving, copying, and deleting a file. In addition, you can also see the working directory, or change to a different directory if you want to.\nPlots: this tab is used by R Graphics Devices to display any graphic or image produced by an R plotting function.\nPackages: this tab allows you to install and update R packages. Often, you will want to use functions from external R packages, and to do this you must first install those packages in your system. While it is possible to write commands for doing this, the Packages tab gives you a richer interface to see what packages are already available in your computer, what their versions are, update them if necessary, or uninstall them in case you no longer need them.\nHelp: this is the tab that gives you access to the “help” or manual documentation of functions, objects, tutorials, and demos of a given R package. The preceding chapter contains an example of the manual documentation for the log() function, showing the main anatomy of the so-called R Documentation files.\n\n\n\n4.2.3 Source or Editor\nThe Source pane is basically the text editor of RStudio. This is the quadrant you use to edit any text file, again, without the need to leave RStudio. The reason why is called “source” is because the text files edited in this pane are, for the most part, files that contain the commands that R will run. In other words, these files are the source of the commands to be executed.\n\n\n4.2.4 Environment, History, Connections\nThe last quadrant is the pane that contains, at least, the following three tabs: Environment, History, and Connections.\nI provide a deeper explanation of the Environment and History tabs in the following chapter Session Management. In the meantime, what you need to know about Environment is that this tab is used to list the objects that have being created, or that are available, in a given R session.\nIn turn, the History tab is a very useful resource that lists all the R commands that you have executed so far. In theory, R will track all the invoked commands since the first time you used it, unless you’ve removed the auxiliary .Rhistory file linked to your working directory, or unless you’ve modified the history mechanism used by your R console.\nAs for the Connections tab, this plays a more advanced (and somewhat obscure) role that I briefly discuss in part IV of the book."
  },
  {
    "objectID": "1-04-rstudio-tour.html#exercises",
    "href": "1-04-rstudio-tour.html#exercises",
    "title": "4  A Quick Tour Around RStudio",
    "section": "4.3 Exercises",
    "text": "4.3 Exercises\n1) In RStudio, one of the panes has tabs Files, Plots, Packages, Help, Viewer.\n\nIn the tab Files, what happens when you click the button with a House icon?\nGo to the Help tab and search for the documentation of the function mean.\nIn the tab Help, what happens when you click the button with a House icon?\n\n\n2) In RStudio, one of the panes has the tabs Environment, History, Connections.\n\nIf you click on tab History, what do see?\nFind what the buttons of the menu bar in tab History are for.\nLikewise, what can you say about the tab Environment?\n\n\n3) When you start a new R session in Rstudio, a message with similar content to the text below appears on the console (the exact content will depend on your R version):\n   R version 3.5.1 (2018-07-02) -- \"Feather Spray\"\n   Copyright (C) 2018 The R Foundation for Statistical Computing\n   Platform: x86_64-apple-darwin15.6.0 (64-bit)\n\n   R is free software and comes with ABSOLUTELY NO WARRANTY.\n   You are welcome to redistribute it under certain conditions.\n   Type 'license()' or 'licence()' for distribution details.\n\n     Natural language support but running in an English locale   \n\n   R is a collaborative project with many contributors.\n   Type 'contributors()' for more information and\n   'citation()' on how to cite R or R packages in publications.\n\n   Type 'demo()' for some demos, 'help()' for on-line help, or\n   'help.start()' for an HTML browser interface to help.\n   Type 'q()' to quit R.\n\nWhat happens when you type (in the console): license()?\nWhat happens when you type (in the console): contributors()?\nWhat happens when you type (in the console): citation()?\nWhat happens when you type (in the console): demo()?"
  },
  {
    "objectID": "1-05-session-management.html",
    "href": "1-05-session-management.html",
    "title": "5  Session Management",
    "section": "",
    "text": "In this chapter I review some important aspects about managing your interactive session with R using RStudio.\nHere’s what you should always keep in mind. From the point of view of a session, all the work, activities, and actions you do with R can be classified into three categories:\nBecause there are several things going on behind the scenes in each of the categories listed above, it is important that we talk about them—at least briefly."
  },
  {
    "objectID": "1-05-session-management.html#starting-a-session",
    "href": "1-05-session-management.html#starting-a-session",
    "title": "5  Session Management",
    "section": "5.1 Starting a Session",
    "text": "5.1 Starting a Session\nStarting a session can be done in two primary ways:\n\nlaunching the R application program, which will give you access to its graphical user interface; or via RStudio or any other IDE that has the ability to open an R session.\nby clicking on a file that your computer associates with R (or RStudio). For example, R-script files (with file extension .R or .r), Quarto document (.qmd extension), R-Markdown files (.Rmd extension), R-Noweb files (.Rnw extension), RStudio project files (.Rproj extension), etc.\n\n\n5.1.1 What happens when you open an R session via RStudio?\nThis is an important question that many users never stop to think about. However, it’s worth reviewing what happens when a session is started. So let’s talk about this.\n\nEvery time you open RStudio, the console pane will display R’s welcome message.\nThe console is always linked to a working directory.\nTypically, the working directory of the console will be your home directory, unless you specified a different location when you installed R in your computer.\nYou can change the working directory to a different directory if you want. This change can be permanent (for future sessions), or temporary (for a current session).\nTo permanently modify the working directory (when a session is opened), go to the menu bar, select “RStudio” tab, click on “Preferences”, and modify the “R General” options.\nTo temporarily change the working directory, go to the menu bar, select the “Session” tab, and click on “Set Working Directory”, or simply specify a working directory with the setwd() function executed from R’s console.\n\n\n\n5.1.2 Opening a session for the first time\nIf you are opening a session in RStudio for the very fist time:\n\nthe “Editor” pane will be collapsed, and\nall the tabs in the “Environment, History, Connections” pane will be empty\n\nIn general, when you open a session (not for the very fist time):\n\nthe “Environment” tab may display some objects, which means you have some existing objects in your global environment. You can also invoke the list function ls() to list any available objects in your current session:\n\n\n# what objects are in my global environment?\nls()\n\n\nthe “History” tab may contain lines of previously used commands; if this is the case it means that there is an associated text file called .Rhistory in your working directory. You can also use the history() function to display the Commands History, that is, all the commands invoked in your interactive sessions:\n\n\n# is my history of commands being tracked?\nhistory()\n\n\n\n5.1.3 Working Directory\nIf you open R via an application program (e.g. launching RStudio) that lets you interact with R’s console, your session will have an associated working directory, sometimes also referred to as the current working directory.\nWhen you install R in your computer, during the installation process a default working directory is assigned to R. By default, this directory is your home directory. You can check whether this is the case if you run the get working directory function getwd() in your console.\n\n# run this command in the console to find out \n# the working directory of your session\ngetwd()\n\nIn RStudio, you can also look at the console pane, and inspect the text right below the Console tab that always displays the working directory of your session. If you see the symbols ~/ it means that the home directory (represented by the tilde) is your working directory.\n\n\n\n\n\nFigure 5.1: The working directory is indicated right below the Console tab."
  },
  {
    "objectID": "1-05-session-management.html#working-during-a-session",
    "href": "1-05-session-management.html#working-during-a-session",
    "title": "5  Session Management",
    "section": "5.2 Working During a Session",
    "text": "5.2 Working During a Session\nWorking with R involves a series of common actions:\n\nwriting commands (in a source document or in the console)\nexecuting commands (from a source doc or from the console)\nlooking or examining outputs\nreading or importing files (e.g. data files, script files)\nwriting or exporting/saving output to files (e.g. data files, images, results)\n\nFrom the logistical point of vew, it all boils down to executing commands, taking into account the following:\n\nwhere a command is being executed from\nif the command requires an input, where does that input come from?\nif the command produces an output, where does that output go to?\n\nThis is why we need to describe the following:\n\nWorking Directory\nWorkspace and Global Environment\nHistory of commands\n\n\n5.2.1 Session’s Working Directory\nYou will be writing commands either directly in the console or in a source document (e.g. R script file, Rmd file, etc.)\nThe console is always associated to a working directory (usually your home directory).\nA source document, once it has been saved, will live in some directory. Ideally, a source document’s directory would be used as its working directory, using relative file-paths to handle all input and output resources required in the code of the source document. Unfortunately, this ideal is far from what happens in practice.\n\nBy default, when you execute code chunks in a saved Rmd file, the working directory is the directory where the Rmd file resides in.\nBy default, when you execute code from an R file, the working directory is that of the console.\n\n\n\n5.2.2 Workspace and Global Environment\nRegardless of where commands are being executed from, R will carry out all the necessary computations, and objects will be created along the way.\nThe collection of objects that are being created (and kept alive) during a session are part of what is considered to be your workspace.\nAt a more technical level, all the objects in your workspace are part of an R environment. To be more precise, the workspace is the Global Environment.\nOn the console, if you type ls(), R will display all the available objects in your workspace.\n\n# available objects in your workspace\nls()\n\nYou can also go to the pane “Environment, History, …” and click on the Environment tab to see the objects in your workspace which are displayed by default under the option “Global Environment”.\n\n\n5.2.3 Commands History\nWhen you start a session, R will track all the commands that you execute during that session. As you execute commands, they will become part of what is called the Commands History.\nYou can find the list of all used commands in the History tab, located in the Environment, History, Connections pane of RStudio. You can also access the commands history with the function history().\n\n\n\n\n\nFigure 5.2: The comands history is avaialble in the History tab.\n\n\nBy default, the history of commands are stored in a text file called .Rhistory that is saved in your session’s working directory."
  },
  {
    "objectID": "1-05-session-management.html#closing-a-session",
    "href": "1-05-session-management.html#closing-a-session",
    "title": "5  Session Management",
    "section": "5.3 Closing a Session",
    "text": "5.3 Closing a Session\nAt some point, the work that you’ve done in a session will come to an end, and consequently you will close the session.\nWhen closing a session, what should you do?\nThis is a somewhat “very personal” type of question, because it is up to you to decide what should happen to all the work that you’ve done in R.\nHaving said that, you can always decide whether or not to:\n\nsave changes in your source document(s)\nsave the commands history in a text file\nsave the objects in your workspace (i.e. objects in Global Environment) in a binary file (native to R)\n\nIt turns out that RStudio comes with default actions that take place when you close a session:\n\nit will ask you if you want to save changes in your source documents\nit will ask you if you want to save the workspace in an .RData file (this is a file that uses R’s native binary format; this is saved in your session’s working directory)\nit will automatically save your commands history in a text file called .Rhistory (saved in your session’s working directory)\n\nAlso, because of RStudio’s default settings, the next time you open a new session it will:\n\nrestore the previously open source document\nrestore objects in the .RData file into your workspace\ngive you access to all the commands stored in the .Rhistory file\n\nOf course, you can change and customize the default settings of RStudio so that R/RStudio do certain things when closing a session."
  }
]